building_railway = {
	building_group = bg_private_infrastructure
	icon = "gfx/interface/icons/building_icons/building_railway.dds"
	
	ai_nationalization_desire = 0.5 # AI is reluctant to privatize railways since they are likely to need subsidies anyway
	
	unlocking_technologies = {
		railways
	}
	
	production_method_groups = {
		pmg_base_building_railway
		pmg_passenger_trains
		pmg_logistics_services_railway
		pmg_automation_building_railway
		# pmg_gaudi_communication #MORGENRÃ–TE
	}
	
	required_construction = construction_cost_very_high
	
	ai_value = {
		value = 2000 # Railways are important
		
		if = { # Trans-Siberian Railway
			limit = {
				owner = {
					has_journal_entry = je_trans_siberian_railway
				}
				NOR = {
					has_building = building_railway
					any_scope_building = {
						is_building_type = building_railway
						is_under_construction = yes
					}
				}
				OR = {
					state_region = s:STATE_MOSCOW
					state_region = s:STATE_YAROSLAVL
					state_region = s:STATE_NIZHNY_NOVGOROD
					state_region = s:STATE_CHUVASHIA
					state_region = s:STATE_KAZAN
					state_region = s:STATE_UFA
					state_region = s:STATE_CHELYABINSK
					state_region = s:STATE_URAL
					state_region = s:STATE_TOBOLSK
					state_region = s:STATE_TOMSK
					state_region = s:STATE_KRASNOYARSK
					state_region = s:STATE_IRKUTSK
					state_region = s:STATE_BURYATIA
					state_region = s:STATE_TRANS_BAIKAL
					state_region = s:STATE_YAKUTSK
					state_region = s:STATE_OKHOTSK
					state_region = s:STATE_AMUR
					state_region = s:STATE_OUTER_MANCHURIA
				}
			}
			add = 10000
		}
		else_if = { # Shinkansen, my beloved
			limit = {
				owner = {
					has_journal_entry = je_meiji_economy
				}
				is_incorporated = yes # Japan proper
				NOR = {
					has_building = building_railway
					any_scope_building = {
						is_building_type = building_railway
						is_under_construction = yes
					}
				}
			}
			add = 10000
		}
		else_if = { # Trans-Continental Railways
			limit = {
				owner = {
					has_journal_entry = je_trans_continental_railway
				}
				OR = {
					state_region = s:STATE_NEBRASKA
					state_region = s:STATE_WYOMING
					state_region = s:STATE_UTAH
					state_region = s:STATE_NEVADA
					state_region = s:STATE_CALIFORNIA
				}
				NOR = {
					has_building = building_railway
					any_scope_building = {
						is_building_type = building_railway
						is_under_construction = yes
					}
				}
			}
			add = 10000
		}
		else_if = { # Canadian Pacific Highway
			limit = {
				owner = {
					has_journal_entry = je_canada_pacific_railway
				}
				OR = {
					state_region = s:STATE_QUEBEC
					state_region = s:STATE_BRITISH_COLUMBIA
					state_region = s:STATE_ONTARIO
					state_region = s:STATE_ALBERTA
					state_region = s:STATE_SASKATCHEWAN
					state_region = s:STATE_MANITOBA
				}
				NOR = {
					has_building = building_railway
					any_scope_building = {
						is_building_type = building_railway
						is_under_construction = yes
					}
				}
			}
			add = 10000
		}
		
		if = { # Manchurian Railway
			limit = {
				exists = c:RUS
				c:RUS ?= owner
				# OR = {
					region = sr:region_manchuria
				# }
				any_scope_building = {
					is_building_type = building_railway
					levels_owned_by_country = {  
						target = c:RUS  
						value  < 1
					}
				}
			}
			add = 10000
		}
		
		# AI shouldn't go around building railways before it needs them
		#if = { # Get them started at least...
		#	limit = {
		#		NOT = { exists = b:building_railway }
		#	}
		#	add = 2000
		#}

		if = {
			limit = {
				relative_infrastructure < 1.1
			}
			multiply = 2
		}
		if = {
			limit = {
				relative_infrastructure < 1
			}
			multiply = 4
		}
		
		if = {
			limit = {
				exists = b:building_railway
			}
			subtract = {
				sg:transportation ?= {
					value = state_goods_delta
				}
				add = { # transport production once all queued levels are employed
					value = 0
					b:building_railway = {
						add = modifier:goods_output_transportation_add
						multiply = {
							value = modifier:goods_output_transportation_mult
							add = 1
						}
						save_temporary_value_as = current_port_transport_production
						if = {
							limit = {
								level > 0
								occupancy > 0
							}
							divide = occupancy
							divide = level
						}
						else = {
							value = 115 # Assume transport production of best PM
						}
						multiply = {
							value = level_after_queued_constructions
							add = 1
						}
						subtract = scope:current_port_transport_production
					}
				}
				min = 0
				sg:transportation ?= {
					divide = {
						value = state_goods_consumption
						min = 1
					}
				}
				multiply = 12000
			}
		}
	}
	
	ownership_type = self
	
	background = "gfx/interface/icons/building_icons/backgrounds/building_panel_bg_railways.dds"
}
